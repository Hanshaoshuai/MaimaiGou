<?php

/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/3/30
 * Time: 15:34
 */
class OrderController extends ApiController {

    public function init() {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function confirmOrderAction() {
        $this->verifyLogin();
        $order_params = $this->getPost();
        $data = array();

        if (isset($order_params['address_id']) && $order_params['address_id']) {
            $receive_address = UserModel::getAddressById($order_params['address_id']);
        } else {
            $receive_address = UserModel::getUserDefaultAddress($this->user_id);
            if (!$receive_address) {
                $code = 2006;
                $data = (object) array();
                $this->apiReturn($data, $code, "没有默认地址");
            }
        }
        if (empty($receive_address)) {
            $receive_address = (object) array();
        }
        $data['receive_address'] = $receive_address;
        if (isset($order_params['product_id']) && $order_params['product_id']) {
            $product_field = array("id", "name", "product_img", "sell_price", "product_type");
            $product = ProductModel::getProductById($order_params['product_id'], $product_field);
            $product['price'] = $product['sell_price'];
            unset($product['sell_price']);
            $product['qty'] = $order_params['qty'];

            if (isset($post["attr_list"]) && $post["attr_list"]) {
                $post["attr_list"] = explode(",", $post["attr_list"]);
                $product["attr_show"] = "";
                foreach ($post["attr_list"] as $attr_key => $attr_v) {
                    $attr_v_v = explode(":", $attr_v);
                    $p_v_id = $attr_v_v[1];
                    $p_v = ProductModel::getProductAttributeById($p_v_id, "attr_name,attr_id,attr_value_id,attr_value_name");
                    if (!empty($product["attr_show"])) {
                        $product["attr_show"] .= "/";
                    }
                    $product["attr_show"] .= $p_v['attr_name'] . ":" . $p_v['attr_value_name'];
                }
                $post["attr"] = json_encode($post["attr"]);
            }
            $coupon = CouponModel::getOneProductCoupon($this->user_id, $order_params['product_id'], "price,id");
            if ($coupon) {
                $product['coupon'] = $coupon;
            } else {
                $product['coupon'] = (object) array();
            }

            $data['product'] = array($product);
        } else if (isset($order_params['cart_id']) && $order_params['cart_id']) {
            $field = array("id", "pid", "qty", "price", "attr", "product_type");
            $where = "user_id = '" . $this->user_id . "'";

            if ($order_params['cart_id']) {
                if (is_array($order_params['cart_id'])) {
                    $ids = implode(",", $order_params['cart_id']);
                    if ($ids) {
                        $where .= " and id in (" . $ids . ") ";
                    } else {
                        $code = 1001;
                        $data = (object) array();
                        $this->apiReturn($data, $code);
                    }
                } else {
                    $where .= " and id = '" . $order_params['cart_id'] . "' ";
                }
                $start = 0;
                $pageSize = 100;
                $cartList = ShopCartModel::cartList($start, $pageSize, $where, false, $field);

                if ($cartList) {
                    foreach ($cartList as &$cartList_v) {
                        $cart_pid = $cartList_v['pid'];
                        $product_field = "name,product_img";
                        $cart_product = ProductModel::getProductById($cart_pid, $product_field);
                        $cartList_v['name'] = $cart_product['name'];
                        $cartList_v['product_img'] = $cart_product['product_img'];
                        $cartList_v['attr'] = json_decode($cartList_v['attr'], true);
                        if ($cartList_v['attr']) {
                            $cartList_v["attr_show"] = "";
                            foreach ($cartList_v['attr'] as $attr_key => $attr_v) {
                                if (!empty($cartList_v["attr_show"])) {
                                    $cartList_v["attr_show"] .= "/";
                                }
                                $cartList_v["attr_show"] .= $attr_v['attr_name'] . ":" . $attr_v["attr_value"]["attr_value_name"];
                            }
                        }
                        $coupon = CouponModel::getOneProductCoupon($this->user_id, $cart_pid, "id,price");
                        if ($coupon) {
                            $cartList_v['coupon'] = $coupon;
                        } else {
                            $cartList_v['coupon'] = (object) array();
                        }
                        unset($cartList_v['attr']); //暂时不返回
                    }
                    $data['product'] = $cartList;
                } else {
                    $code = 1001;
                    $data = (object) array();
                    $this->apiReturn($data, $code);
                }
            } else {
                $code = 1001;
                $data = (object) array();
                $this->apiReturn($data, $code);
            }
        } else {
            $code = 1001;
            $data = (object) array();
            $this->apiReturn($data, $code);
        }
        $this->apiReturn($data, 1000);
    }

    //获取物流信息
    public function getLogisticsInfoAction() {
        $this->verifyLogin();
        $state_arr = array("在途中", "已揽收", "疑难", "已签收");
        $product_order_id = $this->get("product_order_id");
        $OrderInfo = OrderModel::getProductOrderInfo(array("id"=>$product_order_id,"user_id"=>$this->user_id),"id,logistics_com,logistics_order");

        if ($OrderInfo) {
            if ($OrderInfo['logistics_com'] && $OrderInfo['logistics_order']) {
                //参数设置
                $post_data = array();
                $post_data["customer"] = '73A2A869FF1B5EE7D6E279FED3071AA9';  //分配给贵司的的公司编号
                $key = 'pFkmNmxe8299'; //授权密匙
                $post_data["param"] = '{"com":"' . $OrderInfo['logistics_com'] . '","num":"' . $OrderInfo['logistics_order'] . '"}';

                $url = 'http://poll.kuaidi100.com/poll/query.do';
                $post_data["sign"] = md5($post_data["param"] . $key . $post_data["customer"]);
                $post_data["sign"] = strtoupper($post_data["sign"]);
                $o = "";
                foreach ($post_data as $k => $v) {
                    $o .= "$k=" . urlencode($v) . "&";        //默认UTF-8编码格式
                }
                $post_data = substr($o, 0, -1);
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
                $result_json = curl_exec($ch);
                curl_close($ch);
                $result = json_decode($result_json, true);
                if($result){
                    if($result['returnCode']==400){
                        echo json_encode(array("status" => 2002, "data" => array(), "message" => "暂时没有物流信息"));
                        exit;
                    }
                    if($result['returnCode']==500){
                        echo json_encode(array("status" => 2002, "data" => array(), "message" => "暂时没有物流信息"));
                        exit;
                    }
                    if(isset($result['com']) && $result['com']){
                        $where = array('com' => $result['com'], 'status' => 1);
                        $express_data = OrderModel::getExpress($where);
                        $result['state_show'] = $state_arr[$result['state']];
                        $result['express_name'] = $express_data["name"];
                        echo json_encode($result);
                    }else{
                        echo json_encode(array("status" => 2002, "data" => array(), "message" => "暂时没有物流信息"));
                        exit;
                    }
                }

            } else {
                $code = 2002;
                $msg = "没有物流信息";
                $data = array();
                echo json_encode(array("status" => $code, "data" => $data, "message" => $msg));
                exit;
            }
        } else {

            $code = 2001;
            $msg = "未发货";
            $data = array();
            echo json_encode(array("status" => $code, "data" => $data, "message" => $msg));
            exit;
        }
    }

    //请求物流接口的方法
    protected function getExpress($com, $nu, $show = '0', $muti = '0', $order = 'desc') { //子类以及子类的子类可以访问
        $post_data["customer"] = '73A2A869FF1B5EE7D6E279FED3071AA9';  //分配给贵司的的公司编号
        $key = 'pFkmNmxe8299'; //授权密匙
        $id = trim(C('kuaidi_key'));
        $kuaidi_api = trim(C('kuaidi_api'));

        $url = $kuaidi_api . '?id=' . $id . '&com=' . $com . '&nu=' . $nu . '&show=' . $show . '&muti=' . $muti . '&order=' . $order;
        $result = json_decode(file_get_contents($url), true);
        return $result;
    }

    //我的订单
    public function getOrderAction() {
        //setSession('userID', 1);
        $this->verifyLogin();
        $params['uid'] = $this->user_id;
        $status = $this->get('status') ? $this->get('status') : 0;
        $params['page'] = $this->get('page') ? $this->get('page') : 1;
        $params['pageSize'] = $this->get('pageSize') ? $this->get('pageSize') : 6;
        $params['keyWords'] = $this->get('keyWords');
        if (!is_numeric($status) && !is_numeric($params['page']) && !is_numeric($params['pageSize'])) {
            $this->apiReturn((object) array(), "1001");
        }
        if (isset($params['keyWords'])) {
            if (!empty($params['keyWords'])) {
                $status = 9;
            } else {
                $this->apiReturn((object) array(), "1001");
            }
        }
        $O_mod = new OrderModel();

        if ($status == 0) {
            //全部订单
            $count = $O_mod->getOrderAll($params, true);
            $params['page'] = $params['page'] > ceil($count / $params['pageSize']) ? ceil($count / $params['pageSize']) : $params['page'];
            $params['page'] = $params['page'] > 0 ? $params['page'] : 1;
            $order = $O_mod->getOrderAll($params);
        } elseif ($status == 1) {
            //待付款订单
            $count = $O_mod->getOrderPayment($params, true);
            $params['page'] = $params['page'] > ceil($count / $params['pageSize']) ? ceil($count / $params['pageSize']) : $params['page'];
            $params['page'] = $params['page'] > 0 ? $params['page'] : 1;
            $order = $O_mod->getOrderPayment($params);
        } elseif ($status == 2) {
            //待发货订单
            $count = $O_mod->getOrderShipping($params, 1, true);
            $params['page'] = $params['page'] > ceil($count / $params['pageSize']) ? ceil($count / $params['pageSize']) : $params['page'];
            $params['page'] = $params['page'] > 0 ? $params['page'] : 1;
            $order = $O_mod->getOrderShipping($params, 1);
        } elseif ($status == 3) {
            //待收货订单
            $count = $O_mod->getOrderShipping($params, 2, true);
            $params['page'] = $params['page'] > ceil($count / $params['pageSize']) ? ceil($count / $params['pageSize']) : $params['page'];
            $params['page'] = $params['page'] > 0 ? $params['page'] : 1;
            $order = $O_mod->getOrderShipping($params, 2);
        } elseif ($status == 4) {
            //待评论订单
            $count = $O_mod->getOrderCommet($params, true);
            $params['page'] = $params['page'] > ceil($count / $params['pageSize']) ? ceil($count / $params['pageSize']) : $params['page'];
            $params['page'] = $params['page'] > 0 ? $params['page'] : 1;
            //print_r($params['page']);die;
            $order = $O_mod->getOrderCommet($params);
        } elseif ($status == 9 && !empty($params['keyWords'])) {
            //搜索订单
            $countArr = $O_mod->getSearchOrder($params, true);
            $count = $countArr['0']['count'] ? $countArr['0']['count'] : 0;
            if (!empty($count)) {
                $params['page'] = $params['page'] > ceil($count / $params['pageSize']) ? ceil($count / $params['pageSize']) : $params['page'];
                $params['page'] = $params['page'] > 0 ? $params['page'] : 1;
            }
            $order = $O_mod->getSearchOrder($params);
        } else {
            $this->apiReturn((object) array(), "1001");
        }
        if (empty($order)) {
            $this->apiReturn(array("msg" => "数据为空"), "1004");
        } else {
            $order_list = array();
            foreach ($order as $order_k => $temp) {
                $data_a = array();
                if (empty($temp['order_id'])) {
                    continue;
                }

                $data_a['product_order_id'] = $temp['id'];
                $data_a['order_status_id'] = $temp['order_status']; //订单状态
                $data_a['user_id'] = $temp['user_id'];
                $data_a['order_id'] = $temp['order_id'];
                $data_a['payment_method'] = $temp['payment_method'];
                $data_a['order_sn'] = $temp['order_product_sn']; //订单号
                if ($temp['order_status'] == 5 || $temp['order_status']==3 ) {
                    $data_a['order_status'] = "交易成功"; //订单状态
                }elseif($temp['order_status'] == 2) {
                    $data_a['order_status'] = "待收货"; //订单状态
                }elseif($temp['order_status'] == 1) {
                    $data_a['order_status'] = "待发货"; //订单状态
                }elseif($temp['order_status'] == 0) {
                    $data_a['order_status'] = "未付款"; //订单状态
                }

                $data_a['shipping_fee'] = $temp['shipping_fee']?$temp['shipping_fee']:"0.00"; //配送费用
                $data_a['product_id'] = $temp['product_id'];
                $data_a['product_type'] = $temp['product_type']; //产品类型
                $data_a['product_name'] = $temp['product_name'];
                $data_a['product_num'] = $temp['product_num']; //产品数量
                $url = \Yaf_Application::app()->getConfig()->qiniu->imgUrl;
                $product = ProductModel::getProductById($temp['product_id'],"CONCAT('". $url . "',product_img) as product_img,cost_price,sell_price");//获取产品信息
                $temp['product_img'] = $product['product_img'];
                $data_a['product_img'] = $temp['product_img']; //产品图片
                $data_a['price'] = $temp['price']; //原价格
                $data_a['order_amount'] = $temp['price']; //销售价格（现价）
                $data_a['order_num'] = $temp['product_num'];
                if ($temp['attr']) {
                    $arr = json_decode($temp['attr']);
                    if (is_array($arr) && $arr) {
                        foreach ($arr as $attr_k => $v) {
                            if($v->attr_name && $v->attr_value->attr_value_name){
                                $data_a['attr'][$attr_k] = $v->attr_name . ":" . $v->attr_value->attr_value_name;
                            }
                        }
                        if(isset($data_a['attr']) && $data_a['attr']){
                            $data_a['attr'] = implode(" ", $data_a['attr']);
                        }else{
                            $data_a['attr'] = "";
                        }
                    }
                } else {
                    $data_a['attr'] = "";
                }

                //print_r($data);die;
                if ($status == '0' || $status == '9') {
                    if ($temp['order_status'] == "5") {
                        $data_a['status'] = "5";
                    } else {
                        if ($temp['order_status'] == "0") {
                            $data_a['status'] = "1"; //待付款
                        } else {
                            if ($temp['order_status'] == "1") {
                                $data_a['status'] = "2"; //待发货
                            } elseif ($temp['order_status'] == "2") {
                                $data_a['status'] = "3"; //待收货
                            } elseif ($temp['order_status'] == "3") {
                                $data_a['status'] = "4"; //待评论
                            } else {
                                $data_a['status'] = "5";
                            }
                        }
                    }
                } else {
                    $data_a['status'] = $status;
                }
                $order_list[] = $data_a;
            }
            $data = array(
                "count" => $count,
                "thisPage" => $params['page'],
                "pageSize" => $params['pageSize'],
                "countPage" => ceil($count / $params['pageSize']),
                "order_list" => $order_list,
            );
            if (isset($data)) {
                $this->apiReturn($data, "1000");
            } else {
                $this->apiReturn(array("msg" => "数据错误"), "1004");
            }
        }
    }

    //订单搜索页面
    public function getOrderProductAction() {
        $params['uid'] = $this->get('user_id');
        $data = OrderModel::getBuyProduct($params);
        if (!empty($data)) {
            $this->apiReturn($data, "1000");
        } else {
            $this->apiReturn(array("msg" => "未获取到数据"), "1004");
        }
    }

    //生成订单
    public function createOrderAction() {
        $params = $this->getPost();
        if (empty($this->user_id)) {
            $this->apiReturn((object) array(), 1001, "请先登入");
        }
        //临时处理
        if(!isset($params['shop_coupon'])){
            $params['shop_coupon'] = array();
        }

        if(!isset($params['address_id'])){
            $addr = UserModel::getUserDefaultAddress($this->user_id);
            $params['address_id'] = $addr['id'];
        }

        if(!isset($params['order_amount'])){
            $params['address_id'] = $params['amount'];
        }

        $params['user_id'] = $this->user_id;
        $paramsName = array("user_id" => "", "shop_coupon" => "", "address_id" => "", "order_amount" => "");
        $this->checkParams($params, $paramsName);
        $O_mod = new OrderModel();
        $rs = json_decode($O_mod->createOrder($params), true);
        $this->apiReturn($rs['data'], $rs['code'], $rs['msg']);
    }

    //H5 详情页直接点击购买下单接口
    public function hCreateOrderAction() {
        $params = $this->getPost();
        if (empty($this->user_id)) {
            $this->apiReturn(array(), 1001, "请先登入");
        }
        $params['user_id'] = $this->user_id;
        $paramsName = array("user_id" => "", "pid" => "",  "order_amount" => "", "num" => "");        
        $this->checkParams($params, $paramsName);
        $O_mod = new OrderModel();
        $rs = json_decode($O_mod->hcreateOrder($params), TRUE);
        $this->apiReturn($rs['data'], $rs['code'], $rs['msg']);
    }

    //单个商品重新支付
    public function restartPaymentAction() {
        $params = $this->getPost();
        $O_mod = new OrderModel();
        $rs = $O_mod->restartPayment($params);
        $data = array();
        $code = 1001;
        $msg = "error";
        if ($rs !== FALSE) {
            $rs = json_decode($rs, true);
            $data = $rs['data'];
            $code = $rs['code'];
            $msg = $rs['msg'];
        }
        $this->apiReturn($data, $code, $msg);
    }

    public function rePaymentAction() {
        $params = $this->getPost();
        $O_mod = new OrderModel();
        $rs = $O_mod->rePayment($params);
        $data = array();
        $code = 1001;
        $msg = "error";
        if ($rs !== FALSE) {
            $rs = json_decode($rs, true);
            $data = $rs['data'];
            $code = $rs['code'];
            $msg = $rs['msg'];
        }
        $this->apiReturn($data, $code, $msg);
    }
    //批量确认收货
    public function piliang_confirmReceiptAction(){
        $where = array("order_status"=>2,"shipping_status"=>1,"logistics_order"=>"000000000000");
        $orderList = OrderModel::getProductOrderList_new(0, 100, $where);
        if($orderList){
            foreach($orderList as $key=>$v){
                $url='http://121.196.218.57/index.php/api/Order/confirmReceiptTest/?user_id='.$v['user_id']."&product_order_id=".$v['id'];
                $html = file_get_contents($url);
                echo $html."<br>";
            }
        }else{
            echo "已完成！";
        }

    }

    //确认收货
    public function confirmReceiptTestAction(){
        $this->user_id = $this->get("user_id");
        $product_order_id = $this->get("product_order_id");
        $where = array("user_id"=>$this->user_id,'id'=>$product_order_id);
        $product_order_data = OrderModel::getProductOrderInfo($where,"order_status,product_type,payment_status,shipping_status");
        if($product_order_data){
            if($product_order_data['payment_status']==0 || $product_order_data['order_status']==0){
                $this->apiReturn((object)array(), 2005, "订单未支付");
            }

            if($product_order_data['order_status']==3 || $product_order_data['shipping_status']==2){
                $this->apiReturn((object)array(), 2008, "不能重复确认");
            }


            $data = array("order_status"=>3,"shipping_status"=>2);
            $order_res = OrderModel::updateProductOrder($product_order_id,$data);
            if($order_res){
                //如果是3060   确认收货后更新为VIP
                if($product_order_data['product_type']==3){
                    $userinfo = UserModel::getUserMainInfo($this->user_id,"phone,type,provinces,urban,county");
                    if($userinfo['type']==0){
                        UserModel::updataUser(array("type"=>1),$this->user_id);
                        $u_p_data = array("vip_start_time"=>time(),"vip_end_time"=>strtotime("+1 year"));
                        UserModel::updataUserProfile($u_p_data,$this->user_id);
                    }
                    $rs =  M("yaf_user_user")->field("id")->where(array("provinces"=>$userinfo['provinces'],"urban"=>$userinfo['urban'],"county"=>$userinfo['county'],"type"=>2))->getOne();
                    if($rs['id']){
                        $conn = M()->getDbh();
                        $updateuserSql = "update yaf_user_profile set reflect_maidou=reflect_maidou+61 where uid='" . $rs['id'] . "'";
                        $u = $conn->exec($updateuserSql);
                        $log_arr = array("maidou"=>"61","maidou_type"=>3,"record_type"=>1,"notes"=>"获得：可转出麦豆：61（平台返代理商）推广者:".$userinfo['phone']);
                        SystemModel::addMaidouLog($rs['id'],$log_arr);
                    }
                }
                $this->apiReturn((object)array("id"=>$product_order_id), 1000, "确认收货成功！");
            }else{
                $this->apiReturn((object)array(), 2007, "订单更新失败！");
            }
        }else{
            $this->apiReturn((object)array(), 2006, "订单不存在");
        }
    }

    //确认收货
    public function confirmReceiptAction(){
        $this->verifyLogin();
        $post = $this->getPost();
        $product_order_id = $post['product_order_id'];
        $where = array("user_id"=>$this->user_id,'id'=>$product_order_id);
        $product_order_data = OrderModel::getProductOrderInfo($where,"order_status,product_type,payment_status,shipping_status");
        if($product_order_data){
            if($product_order_data['payment_status']==0 || $product_order_data['order_status']==0){
                $this->apiReturn((object)array(), 2005, "订单未支付");
            }
            if($product_order_data['order_status']==3 || $product_order_data['shipping_status']==2){
                $this->apiReturn((object)array(), 2008, "不能重复确认");
            }

            $data = array("order_status"=>3,"shipping_status"=>2,"update_time"=>time(),"end_time"=>time());
            $order_res = OrderModel::updateProductOrder($product_order_id,$data);
            if($order_res){
                //如果是3060   确认收货后更新为VIP
                if($product_order_data['product_type']==3){
                    $userinfo = UserModel::getUserMainInfo($this->user_id,"phone,type,provinces,urban,county");
                    if($userinfo['type']==0){
                        UserModel::updataUser(array("type"=>1),$this->user_id);
                        $u_p_data = array("vip_start_time"=>time(),"vip_end_time"=>strtotime("+1 year"));
                        UserModel::updataUserProfile($u_p_data,$this->user_id);
                    }
                    $rs =  M("yaf_user_user")->field("id")->where(array("provinces"=>$userinfo['provinces'],"urban"=>$userinfo['urban'],"county"=>$userinfo['county'],"type"=>2))->getOne();
                    if($rs['id']){
                        $conn = M()->getDbh();
                        $updateuserSql = "update yaf_user_profile set reflect_maidou=reflect_maidou+61 where uid='" . $rs['id'] . "'";
                        $u = $conn->exec($updateuserSql);
                        $log_arr = array("maidou"=>"61","maidou_type"=>3,"record_type"=>1,"notes"=>"获得：可转出麦豆：61（平台返代理商）推广者:".$userinfo['phone']);
                        SystemModel::addMaidouLog($rs['id'],$log_arr);
                    }
                }
                $this->apiReturn((object)array(), 1000, "确认收货成功！");
            }else{
                $this->apiReturn((object)array(), 2007, "订单更新失败！");
            }
        }else{
            $this->apiReturn((object)array(), 2006, "订单不存在");
        }
    }
}
